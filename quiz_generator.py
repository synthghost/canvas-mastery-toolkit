import re
import json
import uuid
import logging
import urllib.parse
from os import path
from config import config
from canvas import CourseManager
from argparse import ArgumentParser
from datetime import datetime, timedelta, timezone


###########################################################################
# QUIZ GENERATOR
# To be executed from MATLAB
###########################################################################


# File handling
logsFolder = 'logs'
outputFolder = 'output'

def _path(folder, filename):
    return path.join(config['base_path'], folder, filename)

def _isValidFile(parser, filename):
    if not path.exists(_path(outputFolder, filename)):
        parser.error('The file {} does not exist!'.format(filename))
        return

    return filename


# Logging
logger = logging.getLogger('canvasapi')
handler = logging.FileHandler(_path(logsFolder, 'matlab.log'))
formatter = logging.Formatter('%(asctime)s %(levelname)s [%(name)s] %(message)s')

handler.setLevel(logging.DEBUG)
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)


# Latex conversion
def latexrepl(match):
  if isinstance(match, re.Match):
    match = match.groups()[0]

  # Double-encode URLs to match Canvas behavior
  encoded = urllib.parse.quote(urllib.parse.quote(match))

  # Generate Canvas equation image HTML
  return f'<img class="equation_image" title="{match}" src="/equation_images/{encoded}?scale=1" alt="LaTeX: {match}" data-equation-content="{match}" data-ignore-a11y-check="" />'

# Parse LaTeX strings enclosed by $
def latex(text):
  p = re.compile('\${1,2}(.*?)\${1,2}')

  return p.sub(latexrepl, text)


# Gather command line arguments from MATLAB
parser = ArgumentParser(description='Canvas Mastery Toolkit - MATLAB Quiz Generator Sidecar')

parser.add_argument('-d', '--dry-run', action='store_true', help='perform data manipulation but do not post to Canvas')
parser.add_argument('-l', '--limit', nargs=1, help='limit on questions to add')
parser.add_argument('file', nargs=1, help='path to .json data file', type=lambda input: _isValidFile(parser, input))

args = parser.parse_args()

dry = True if args.dry_run else False
limit = int(args.limit[0]) if args.limit else -1

if args.file:
    filename = args.file[0]

if not filename:
    print('Specify a filename via command line arguments')
    exit()

print(f'Using file {filename} with a limit of {limit}')

if dry:
  print('Dry run:')


# Connect to Canvas course
manager = CourseManager()
course = manager.getCourse()

print(course)

newyork = timezone(-timedelta(hours=4)) # summer
# newyork = timezone(-timedelta(hours=5)) # winter


# Create a blank quiz
if not dry:
  quiz = course.create_quiz({
    'title': f'Quiz Pipeline Test (MATLAB Generated, Python Uploaded) - {uuid.uuid4()}',
    'description': 'Questions generated by MATLAB, then uploaded by Python',
    'quiz_type': 'assignment',
    'shuffle_answers': False,
    'due_at': datetime(2023, 8, 31, 23, 59, tzinfo=newyork).isoformat(timespec='minutes'),
  })

  print(quiz)


# Read the generated data as JSON
path = _path(outputFolder, filename)

with open(path, 'r') as file:
    data = json.load(file)

# Keep count for limiting purposes
count = 0

# Iterate over data to prepare for Canvas API
for q in data['questions']:

  count += 1
  if limit > 0 and count >= limit:
    # Stop adding questions past the given limit
    break

  question = {
    'question_name': q['name'],
    'question_text': latex(q['text']),
    'question_type': q['type'],
    'points_possible': q['points'],
    'answers': [],
  }

  if q.get('distractors'):
    question['matching_answer_incorrect_matches'] = '\n'.join(q['distractors'])

  for a in q['answers']:
    answer = {}

    # Multiple question types
    if 'text' in a:
      key = 'answer_text' if q['type'] == 'multiple_dropdowns_question' else 'answer_html'
      answer[key] = latex(a['text'])

    if 'weight' in a:
      answer['answer_weight'] = 100 if a['weight'] > 0 else 0

    if a.get('comment'):
      answer['answer_comment_html'] = latex(a['comment'])

    # Matching questions
    if 'left' in a:
      answer['answer_match_left_html'] = latex(a['left'])

    if 'right' in a:
      answer['answer_match_right'] = a['right']

    # Dropdown questions
    if 'blank_id' in a:
      answer['blank_id'] = a['blank_id']

    # Numerical questions
    if 'type' in a:
      answer['numerical_answer_type'] = a['type']

    if 'numerics' not in a:
      question['answers'].append(answer)
      continue

    n = a['numerics']

    if 'exact' in n:
      answer['answer_exact'] = n['exact']

    if 'error_margin' in n:
      answer['answer_error_margin'] = n['error_margin']

    if 'approximate' in n:
      answer['answer_approximate'] = n['approximate']

    if 'precision' in n:
      answer['answer_precision'] = n['precision']

    if 'range_start' in n:
      answer['answer_range_start'] = n['range_start']

    if 'range_end' in n:
      answer['answer_range_end'] = n['range_end']

    question['answers'].append(answer)

  if dry or not quiz:
    print(question)
    continue

  # Post the quiz
  quiz.create_question(question=question)


# Return to MATLAB
print('Done!')
